name: Linux - Build libfp
on:
  workflow_call:
    secrets:
      qt_ffynnon_cred:
        description: 'Credentials for getting Qt from Ffynnon'
        required: true
env:
  qt_install_dir: ${{ github.workspace }}/Qt/Install
  libfp_src_suffix: libfp/Source
  libfp_src_dir: ${{ github.workspace }}/libfp/Source
  libfp_build_dir: ${{ github.workspace }}/libfp/Build

jobs:
  build-libfp:
    name: Build libfp - Linux (Debug/Release)
    strategy:
      matrix:
        qt_linkage: [shared, static]
    runs-on: ubuntu-20.04
    env:
      c_comp: clang-12
      cxx_comp: clang++-12
      cmake_gen: Ninja Multi-Config
    steps:
    - name: Set derived variables with shell because GitHub Actions env context sucks
      run: |
        echo "libfp_package_path=${{ env.libfp_build_dir }}/out/dist" >> $GITHUB_ENV
        libfp_install_path="${{ env.libfp_build_dir }}/out/install"
        echo "libfp_install_path=$libfp_install_path" >> $GITHUB_ENV
        echo "qt_cmake=$qt_install_dir/bin/qt-cmake" >> $GITHUB_ENV
    - name: Install Qt (custom build)
      uses: oblivioncth/actions/general/install-and-cache-qt-from-ffynnon@dev
      with:
        version: 6.4.0
        os: linux
        compiler: clang12
        linkage: ${{ matrix.qt_linkage }}
        path: ${{ env.qt_install_dir }}
        credentials: ${{ secrets.qt_ffynnon_cred }} 
    - name: Install OpenGL lib
      run: sudo apt-get install libglu1-mesa-dev
    - name: Install XCB-XKB
      run: sudo apt-get install libxkbcommon-dev libxcb-xkb-dev
    - name: Install Ninja
      run: sudo apt-get install ninja-build
    - name: Install Harfbuzz
      run: sudo apt-get install libharfbuzz-dev
    - name: Checkout libfp
      uses: actions/checkout@v3
      with:
        path: ${{ env.libfp_src_suffix }}
        fetch-depth: 0 # Required for verbose versioning to work correctly
    - name: Build/Install libfp
      working-directory: ${{ env.libfp_src_dir }}
      run: |
        echo Configuring CMake...
        "$qt_cmake" -G "$cmake_gen" -S "$libfp_src_dir" -B "$libfp_build_dir" -D CMAKE_CXX_COMPILER="$cxx_comp" -D CMAKE_C_COMPILER="$c_comp"
        echo Changing to build directory...
        cd "$libfp_build_dir"
        echo Building libfp debug...
        cmake --build . --target all --config Debug
        echo Building libfp release...
        cmake --build . --target all --config Release
        echo Installing libfp Debug
        cmake --build . --target install --config Debug
        echo Installing libfp Release/
        cmake --build . --target install --config Release
        echo Packaging libfp...
        cpack -C "Debug;Release"
        echo Build complete.
    - name: Get libfp artifact name
      run: |
        cpack_name=$(find "${{ env.libfp_package_path }}" -type f -name "*.zip")
        artifact_name=$(basename "$cpack_name" .zip)
        echo "current_artifact_name=$artifact_name" >> $GITHUB_ENV
    - name: Upload libfp build artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.current_artifact_name }}
        path: ${{ env.libfp_install_path }}
        if-no-files-found: error
